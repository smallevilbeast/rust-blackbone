/* automatically generated by rust-bindgen 0.68.1 */

use crate::types::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Process_SectionInfo {
    pub size: u64,
    pub attrib: u32,
}
#[repr(C)]
pub struct Process_HandleInfo {
    pub handle: HANDLE,
    pub access: u32,
    pub flags: u32,
    pub pObject: u64,
    pub typeName: *const wchar_t,
    pub name: *const wchar_t,
    pub section: *mut Process_SectionInfo,
}
#[repr(C)]
pub struct Process_ThreadInfo {
    pub tid: u32,
    pub startAddress: usize,
    pub mainThread: BOOL,
}
#[repr(C)]
pub struct Process_ProcessInfo {
    pub pid: DWORD,
    pub imageName: *const wchar_t,
    pub threads: *mut Process_ThreadInfo,
    pub threadCount: usize,
}
pub type ProcessPtr = PVOID;
pub type PROCENUMBYNAMEPROC =
    ::std::option::Option<unsafe extern "C" fn(pid: DWORD, lParam: LPARAM)>;
pub type PROCHANDLEENUMPROC = ::std::option::Option<
    unsafe extern "C" fn(handleInfo: *mut Process_HandleInfo, lParam: LPARAM),
>;
pub type PROCPROCESSENUMPROC = ::std::option::Option<
    unsafe extern "C" fn(processInfo: *mut Process_ProcessInfo, lParam: LPARAM),
>;
extern "C" {
    pub fn Process_Create() -> ProcessPtr;
}
extern "C" {
    pub fn Process_Destroy(process: ProcessPtr);
}
extern "C" {
    pub fn Process_Attach(process: ProcessPtr, pid: DWORD, access: DWORD) -> NTSTATUS;
}
extern "C" {
    pub fn Process_AttachByName(
        process: ProcessPtr,
        name: *const wchar_t,
        access: DWORD,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn Process_AttachByHandle(process: ProcessPtr, handle: HANDLE) -> NTSTATUS;
}
extern "C" {
    pub fn Process_CreateAndAttach(
        process: ProcessPtr,
        path: *const wchar_t,
        suspended: BOOL,
        forceInit: BOOL,
        cmdLine: *const wchar_t,
        currentDir: *const wchar_t,
        pStartup: *mut STARTUPINFOW,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn Process_Detach(process: ProcessPtr) -> NTSTATUS;
}
extern "C" {
    pub fn Process_EnsureInit(process: ProcessPtr) -> NTSTATUS;
}
extern "C" {
    pub fn Process_Suspend(process: ProcessPtr) -> NTSTATUS;
}
extern "C" {
    pub fn Process_Resume(process: ProcessPtr) -> NTSTATUS;
}
extern "C" {
    pub fn Process_pid(process: ProcessPtr) -> DWORD;
}
extern "C" {
    pub fn Process_valid(process: ProcessPtr) -> BOOL;
}
extern "C" {
    pub fn Process_Terminate(process: ProcessPtr, code: DWORD) -> NTSTATUS;
}
extern "C" {
    pub fn Process_EnumHandles(process: ProcessPtr, lpEnumFunc: PROCHANDLEENUMPROC, lParam: LPARAM);
}
extern "C" {
    pub fn Process_EnumByName(name: *const wchar_t, lpEnumFunc: PROCENUMBYNAMEPROC, lParam: LPARAM);
}
extern "C" {
    pub fn Process_EnumByNameOrPID(
        pid: DWORD,
        name: *const wchar_t,
        includeThreads: BOOL,
        lpEnumFunc: PROCPROCESSENUMPROC,
        lParam: LPARAM,
    );
}
